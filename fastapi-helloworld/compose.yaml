name: ai-mart-platform

services:
  user_services:
    image: user-mart-api:latest
    build:
      context: ./user_services
      dockerfile: Dockerfile.dev
    volumes:
      - ./user_services:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_db
    ports:
      - "8005:8005" # Expose container port 8000 to host port 8000
  
  Product_services:
    image: product-mart-api:latest
    build:
      context: ./Product_services
      dockerfile: Dockerfile.dev
    volumes:
      - ./Product_services:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_product_db
    ports:
      - "8009:8009" # Expose container port 8000 to host port 8000

  order_service:
    image: order-mart-api:latest
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_order_db
    ports:
      - "8003:8003" # Expose container port 8000 to host port 8000

  inventory_service:
    image: inventory-mart-api:latest
    build:
      context: ./Inventory_services
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_services:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_inventory_db
    ports:
      - "8010:8010" # Expose container port 8000 to host port 8000

  notification_service:
    image: notification-mart-api:latest
    build:
      context: ./notification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification_service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_notification_db
    ports:
      - "8008:8008" # Expose container port 8000 to host port 8000


  payment_service:
    image: payment-mart-api:latest
    build:
      context: ./payment_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./payment_service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_db
    ports:
      - "8007:8007" # Expose container port 8000 to host port 8000





  # z_realtime_service:
  #   image: z-realtime-mart-api:latest
  #   build:
  #     context: ./z_realtime_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./z_realtime_service:/code # Sync local development directory with the container
  #   depends_on:
  #     - broker
  #     - postgres_db
  #   ports:
  #     - "8008:8008" # Expose container port 8000 to host port 8000













  postgres:
    image: postgres:latest
    restart: always
    container_name: kong-database
    environment:
      POSTGRES_USER: "kong"
      POSTGRES_PASSWORD: "kong"
      POSTGRES_DB: "kong"
    ports:
      - "5488:5432"


  kong-bootstrap:
    image: kong:3.6.1-ubuntu
    container_name: kong-bootstrap
    hostname: kong-bootstrap
    depends_on:
      - postgres
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "kong-database"
      KONG_PG_DATABASE: "kong"
      KONG_PG_USER: "kong"
      KONG_PG_PASSWORD: "kong"
    command: "kong migrations bootstrap"
    restart: "on-failure"

  kong:
    image: kong:3.6.1-ubuntu
    restart: always
    container_name: kong
    hostname: kong
    depends_on:
      - kong-bootstrap
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "kong-database"
      KONG_PG_DATABASE: "kong"
      KONG_PG_USER: "kong"
      KONG_PG_PASSWORD: "kong"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002, 0.0.0.0:8445 ssl"
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    command: "kong start"
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      # - "8003:8003"
      - "8004:8004"
      # - "8005:8005"
      - "8006:8006"
      # - "8007:8007"
      # - "8008:8008"
      # - "8009:8009" 
      - "8443:8443"
      - "8444:8444"
      - "8445:8445"
    volumes:
      - ./config:/opt/kong











  postgres_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5480:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data

  postgres_user_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
     - POSTGRES_USER=ziakhan
     - POSTGRES_PASSWORD=my_password
     - POSTGRES_DB=mydatabase
    ports:
      - "5483:5432"
    volumes:
      - postgres_user_db:/var/lib/postgresql/data

  postgres_order_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5482:5432"
    volumes:
      - postgres_order_db:/var/lib/postgresql/data


  postgres_product_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductsCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5481:5432"
    volumes:
      - postgres_product_db:/var/lib/postgresql/data

  postgres_inventory_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5484:5432"
    volumes:
      - postgres_inventory_db:/var/lib/postgresql/data

  postgres_notification_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresNotificationCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5485:5432"
    volumes:
      - postgres_notification_db:/var/lib/postgresql/data

  postgres_payment_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresPaymentCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5486:5432"
    volumes:
      - postgres_payment_db:/var/lib/postgresql/data



  # postgres_z_realtime_db:
  #   image: postgres:latest # Use the official PostgreSQL image
  #   restart: always
  #   container_name: PostgresZRealtimeCont
  #   environment:
  #     - POSTGRES_USER=ziakhan
  #     - POSTGRES_PASSWORD=my_password
  #     - POSTGRES_DB=mydatabase
  #   ports:
  #     - "5487:5432"
  #   volumes:
  #     - postgres_z_realtime_db:/var/lib/postgresql/data




  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  postgres_db:
    driver: local
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local
  postgres_user_db:
    driver: local
  postgres_notification_db:
    driver: local
  postgres_payment_db:
    driver: local
  # postgres_z_realtime_db:
  #   driver: local
 

networks:
  default:
    driver: bridge
